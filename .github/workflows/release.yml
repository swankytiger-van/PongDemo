name: Build & Release

on:
  push:
    branches: [ main ]      # 每次 push 自动生成 nightly
  workflow_dispatch:        # 手动触发
  pull_request:
jobs:
  build:
    runs-on: ${{ matrix.os }}         
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
            exe: main.exe
          - os: ubuntu-latest
            triplet: x64-linux-dynamic
            exe: main
          - os: macos-latest
            triplet: arm64-osx
            exe: main


    steps:
      - uses: actions/checkout@v4
      - name: Convert to full clone
        run: git fetch --unshallow
      - name: Install Ninja  # 仅 Windows
        if: runner.os == 'Windows'
        run: choco install ninja -y
      - name: Install system deps
        if: runner.os != 'Windows'
        run: |
          if [ "${{ runner.os }}" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake ninja-build libgl1-mesa-dev libudev-dev libopenal-dev libflac-dev libvorbis-dev libx11-dev libxrandr-dev libxcursor-dev libxi-dev
          elif [ "${{ runner.os }}" = "macOS" ]; then
            brew install cmake ninja
          fi
        shell: bash
      - name: Bootstrap vcpkg
        run: |
          git clone --depth 1 https://github.com/Microsoft/vcpkg.git
          if [ "${{ runner.os }}" = "Windows" ]; then
            ./vcpkg/bootstrap-vcpkg.bat
          else
            ./vcpkg/bootstrap-vcpkg.sh
          fi
        shell: bash

      - name: Install SFML
        run: ./vcpkg/vcpkg install sfml --triplet=${{ matrix.triplet }}

      - name: Configure & Build (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # 添加 MSVC 环境
          & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.ps1"
          cmake -B build -S . `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$env:GITHUB_WORKSPACE\vcpkg\scripts\buildsystems\vcpkg.cmake"
          cmake --build build --config Release
            # ===== 非 Windows：保持 Ninja =====
      - name: Configure & Build (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          # 让 CMake 找到 vcpkg 提供的 SFMLConfig.cmake
          export SFML_DIR="${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}/share/sfml"
          cmake -B build -S . \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" \
            -DCMAKE_PREFIX_PATH="${{ github.workspace }}/vcpkg/installed/${{ matrix.triplet }}"
          cmake --build build --config Release
          
      - name: Package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force package
          # ① 拷贝可执行文件
          $exe = Get-ChildItem -Path build -Filter ${{ matrix.exe }} -File -Recurse | Select-Object -First 1
          if ($exe) { Copy-Item -Path $exe.FullName -Destination package/ }
          else { throw "Executable ${{ matrix.exe }} not found" }
          # ② 仅 Windows 拷 dll
          if ("${{ runner.os }}" -eq "Windows") {
            Copy-Item vcpkg/installed/${{ matrix.triplet }}/bin/*.dll package/ -ErrorAction SilentlyContinue
          }
          # ③ 压包
          if ("${{ runner.os }}" -eq "Windows") {
            Compress-Archive -Path package/* -DestinationPath PongDemo-${{ matrix.triplet }}.zip
          } else {
            cd package && zip -r ../PongDemo-${{ matrix.triplet }}.zip . && cd ..
          }

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        if: github.event_name != 'pull_request'
        with:
          tag_name: nightly
          name: "Nightly Build"
          body: "Auto-generated nightly build for ${{ matrix.triplet }}"
          files: PongDemo-${{ matrix.triplet }}.zip
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}